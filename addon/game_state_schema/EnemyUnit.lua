-- This sub code was programmatically added by update_flatbuffers.py
-- It is intended to replace the `require` functionality missing from the WOW lua environment.
-- We wrap the entire module in an function called "export_fn()" and then load that fn into Portunus.Modules at the bottom of this file.
local _, Portunus = ...
local function require(m) local e=Portunus.Modules[m] if e==nil then error("Failed to load module " .. m) end return e end
local function export_fn()

--[[ game_state_schema.EnemyUnit

  Automatically generated by the FlatBuffers compiler, do not modify.
  Or modify. I'm a message, not a cop.

  flatc version: 24.3.25

  Declared by  : 
  Rooting type : game_state_schema.GameState ()

--]]

local __game_state_schema_UnitBase = require('game_state_schema.UnitBase')
local flatbuffers = require('flatbuffers')

local EnemyUnit = {}
local mt = {}

function EnemyUnit.New()
  local o = {}
  setmetatable(o, {__index = mt})
  return o
end

function mt:Init(buf, pos)
  self.view = flatbuffers.view.New(buf, pos)
end

function mt:Base()
  local o = self.view:Offset(4)
  if o ~= 0 then
    local x = self.view:Indirect(self.view.pos + o)
    local obj = __game_state_schema_UnitBase.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:UnitGuid()
  local o = self.view:Offset(6)
  if o ~= 0 then
    return self.view:String(self.view.pos + o)
  end
end

function mt:Name()
  local o = self.view:Offset(8)
  if o ~= 0 then
    return self.view:String(self.view.pos + o)
  end
end

function mt:NameplateVisible()
  local o = self.view:Offset(10)
  if o ~= 0 then
    return (self.view:Get(flatbuffers.N.Bool, self.view.pos + o) ~=0)
  end
  return false
end

function mt:Attackable()
  local o = self.view:Offset(12)
  if o ~= 0 then
    return (self.view:Get(flatbuffers.N.Bool, self.view.pos + o) ~=0)
  end
  return false
end

function mt:InCombat()
  local o = self.view:Offset(14)
  if o ~= 0 then
    return (self.view:Get(flatbuffers.N.Bool, self.view.pos + o) ~=0)
  end
  return false
end

function mt:ThreatSituation()
  local o = self.view:Offset(16)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Uint8, self.view.pos + o)
  end
  return 0
end

function EnemyUnit.Start(builder)
  builder:StartObject(7)
end

function EnemyUnit.AddBase(builder, base)
  builder:PrependStructSlot(0, base, 0)
end

function EnemyUnit.AddUnitGuid(builder, unitGuid)
  builder:PrependUOffsetTRelativeSlot(1, unitGuid, 0)
end

function EnemyUnit.AddName(builder, name)
  builder:PrependUOffsetTRelativeSlot(2, name, 0)
end

function EnemyUnit.AddNameplateVisible(builder, nameplateVisible)
  builder:PrependBoolSlot(3, nameplateVisible, false)
end

function EnemyUnit.AddAttackable(builder, attackable)
  builder:PrependBoolSlot(4, attackable, false)
end

function EnemyUnit.AddInCombat(builder, inCombat)
  builder:PrependBoolSlot(5, inCombat, false)
end

function EnemyUnit.AddThreatSituation(builder, threatSituation)
  builder:PrependUint8Slot(6, threatSituation, 0)
end

function EnemyUnit.End(builder)
  return builder:EndObject()
end

return EnemyUnit
end
-- The above `end` keyword and the following line are designed to replace the `require` functionality missing from the WOW lua environment.
Portunus.Modules["game_state_schema.EnemyUnit"]=export_fn()

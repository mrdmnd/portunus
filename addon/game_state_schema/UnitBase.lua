-- This sub code was programmatically added by update_flatbuffers.py
-- It is intended to replace the `require` functionality missing from the WOW lua environment.
-- We wrap the entire module in an function called "export_fn()" and then load that fn into Portunus.Modules at the bottom of this file.
local _, Portunus = ...
local function require(m) local e=Portunus.Modules[m] if e==nil then error("Failed to load module " .. m) end return e end
local function export_fn()

--[[ game_state_schema.UnitBase

  Automatically generated by the FlatBuffers compiler, do not modify.
  Or modify. I'm a message, not a cop.

  flatc version: 24.3.25

  Declared by  : 
  Rooting type : game_state_schema.GameState ()

--]]

local __game_state_schema_Aura = require('game_state_schema.Aura')
local __game_state_schema_SpellCastInfo = require('game_state_schema.SpellCastInfo')
local flatbuffers = require('flatbuffers')

local UnitBase = {}
local mt = {}

function UnitBase.New()
  local o = {}
  setmetatable(o, {__index = mt})
  return o
end

function mt:Init(buf, pos)
  self.view = flatbuffers.view.New(buf, pos)
end

function mt:HealthCurrent()
  local o = self.view:Offset(4)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Uint32, self.view.pos + o)
  end
  return 0
end

function mt:HealthMaximum()
  local o = self.view:Offset(6)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Uint32, self.view.pos + o)
  end
  return 0
end

function mt:Speed()
  local o = self.view:Offset(8)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Float32, self.view.pos + o)
  end
  return 0.0
end

function mt:SpellCastInfo()
  local o = self.view:Offset(10)
  if o ~= 0 then
    local x = self.view.pos + o
    local obj = __game_state_schema_SpellCastInfo.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:Buffs(j)
  local o = self.view:Offset(12)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 12)
    local obj = __game_state_schema_Aura.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:BuffsLength()
  local o = self.view:Offset(12)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

function mt:Debuffs(j)
  local o = self.view:Offset(14)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 12)
    local obj = __game_state_schema_Aura.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:DebuffsLength()
  local o = self.view:Offset(14)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

function UnitBase.Start(builder)
  builder:StartObject(6)
end

function UnitBase.AddHealthCurrent(builder, healthCurrent)
  builder:PrependUint32Slot(0, healthCurrent, 0)
end

function UnitBase.AddHealthMaximum(builder, healthMaximum)
  builder:PrependUint32Slot(1, healthMaximum, 0)
end

function UnitBase.AddSpeed(builder, speed)
  builder:PrependFloat32Slot(2, speed, 0.0)
end

function UnitBase.AddSpellCastInfo(builder, spellCastInfo)
  builder:PrependStructSlot(3, spellCastInfo, 0)
end

function UnitBase.AddBuffs(builder, buffs)
  builder:PrependUOffsetTRelativeSlot(4, buffs, 0)
end

function UnitBase.StartBuffsVector(builder, numElems)
  return builder:StartVector(12, numElems, 4)
end

function UnitBase.AddDebuffs(builder, debuffs)
  builder:PrependUOffsetTRelativeSlot(5, debuffs, 0)
end

function UnitBase.StartDebuffsVector(builder, numElems)
  return builder:StartVector(12, numElems, 4)
end

function UnitBase.End(builder)
  return builder:EndObject()
end

return UnitBase
end
-- The above `end` keyword and the following line are designed to replace the `require` functionality missing from the WOW lua environment.
Portunus.Modules["game_state_schema.UnitBase"]=export_fn()

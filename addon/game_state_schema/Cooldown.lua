-- This sub code was programmatically added by update_flatbuffers.py
-- It is intended to replace the `require` functionality missing from the WOW lua environment.
-- We wrap the entire module in an function called "export_fn()" and then load that fn into Portunus.Modules at the bottom of this file.
local _, Portunus = ...
local function require(m) local e=Portunus.Modules[m] if e==nil then error("Failed to load module " .. m) end return e end
local function export_fn()

--[[ game_state_schema.Cooldown

  Automatically generated by the FlatBuffers compiler, do not modify.
  Or modify. I'm a message, not a cop.

  flatc version: 24.3.25

  Declared by  : 
  Rooting type : game_state_schema.GameState ()

--]]

local flatbuffers = require('flatbuffers')

local Cooldown = {}
local mt = {}

function Cooldown.New()
  local o = {}
  setmetatable(o, {__index = mt})
  return o
end

function mt:Init(buf, pos)
  self.view = flatbuffers.view.New(buf, pos)
end

function mt:SpellId()
  return self.view:Get(flatbuffers.N.Uint32, self.view.pos + 0)
end

function mt:Ready()
  return self.view:Get(flatbuffers.N.Uint32, self.view.pos + 4)
end

function mt:Charges()
  return self.view:Get(flatbuffers.N.Uint8, self.view.pos + 8)
end

function Cooldown.CreateCooldown(builder, spellId, ready, charges)
  builder:Prep(4, 12)
  builder:Pad(3)
  builder:PrependUint8(charges)
  builder:PrependUint32(ready)
  builder:PrependUint32(spellId)
  return builder:Offset()
end

return Cooldown
end
-- The above `end` keyword and the following line are designed to replace the `require` functionality missing from the WOW lua environment.
Portunus.Modules["game_state_schema.Cooldown"]=export_fn()

-- This sub code was programmatically added by update_flatbuffers.py
local _, Portunus = ...
local function require(m) local e=Portunus.Modules[m] if e==nil then error("Failed to load module " .. m) end return e end
local function export_fn()

--[[ game_state_schema.GameState

  Automatically generated by the FlatBuffers compiler, do not modify.
  Or modify. I'm a message, not a cop.

  flatc version: 24.3.25

  Declared by  : 
  Rooting type : game_state_schema.GameState ()

--]]

local __game_state_schema_Cooldown = require('game_state_schema.Cooldown')
local __game_state_schema_EnemyUnit = require('game_state_schema.EnemyUnit')
local __game_state_schema_PlayerUnit = require('game_state_schema.PlayerUnit')
local __game_state_schema_Resource = require('game_state_schema.Resource')
local flatbuffers = require('flatbuffers')

local GameState = {}
local mt = {}

function GameState.New()
  local o = {}
  setmetatable(o, {__index = mt})
  return o
end

function GameState.GetRootAsGameState(buf, offset)
  if type(buf) == "string" then
    buf = flatbuffers.binaryArray.New(buf)
  end

  local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
  local o = GameState.New()
  o:Init(buf, n + offset)
  return o
end

function mt:Init(buf, pos)
  self.view = flatbuffers.view.New(buf, pos)
end

function mt:SnapshotTime()
  local o = self.view:Offset(4)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Uint32, self.view.pos + o)
  end
  return 0
end

function mt:Player()
  local o = self.view:Offset(6)
  if o ~= 0 then
    local x = self.view:Indirect(self.view.pos + o)
    local obj = __game_state_schema_PlayerUnit.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:Cooldowns(j)
  local o = self.view:Offset(8)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 4)
    x = self.view:Indirect(x)
    local obj = __game_state_schema_Cooldown.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:CooldownsLength()
  local o = self.view:Offset(8)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

function mt:Resources(j)
  local o = self.view:Offset(10)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 4)
    x = self.view:Indirect(x)
    local obj = __game_state_schema_Resource.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:ResourcesLength()
  local o = self.view:Offset(10)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

function mt:CurrentTargetGuid()
  local o = self.view:Offset(12)
  if o ~= 0 then
    return self.view:String(self.view.pos + o)
  end
end

function mt:VisibleTargets(j)
  local o = self.view:Offset(14)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 4)
    x = self.view:Indirect(x)
    local obj = __game_state_schema_EnemyUnit.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:VisibleTargetsLength()
  local o = self.view:Offset(14)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

function GameState.Start(builder)
  builder:StartObject(6)
end

function GameState.AddSnapshotTime(builder, snapshotTime)
  builder:PrependUint32Slot(0, snapshotTime, 0)
end

function GameState.AddPlayer(builder, player)
  builder:PrependStructSlot(1, player, 0)
end

function GameState.AddCooldowns(builder, cooldowns)
  builder:PrependUOffsetTRelativeSlot(2, cooldowns, 0)
end

function GameState.StartCooldownsVector(builder, numElems)
  return builder:StartVector(4, numElems, 4)
end

function GameState.AddResources(builder, resources)
  builder:PrependUOffsetTRelativeSlot(3, resources, 0)
end

function GameState.StartResourcesVector(builder, numElems)
  return builder:StartVector(4, numElems, 4)
end

function GameState.AddCurrentTargetGuid(builder, currentTargetGuid)
  builder:PrependUOffsetTRelativeSlot(4, currentTargetGuid, 0)
end

function GameState.AddVisibleTargets(builder, visibleTargets)
  builder:PrependUOffsetTRelativeSlot(5, visibleTargets, 0)
end

function GameState.StartVisibleTargetsVector(builder, numElems)
  return builder:StartVector(4, numElems, 4)
end

function GameState.End(builder)
  return builder:EndObject()
end

return GameState
end
Portunus.Modules["game_state_schema.GameState"]=export_fn()
